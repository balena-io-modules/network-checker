// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, _, checkHost, checkURL, monitor, net, request;

  Promise = require('bluebird');

  request = Promise.promisifyAll(require('request'));

  net = require('net');

  _ = require('lodash');

  exports.monitor = monitor = function(checkFn, options, fn) {
    var _check, connectivityState, interval;
    if (!_.isFunction(checkFn)) {
      throw new Error("checkFn should be a Function");
    }
    checkFn = Promise.method(checkFn);
    interval = (options != null ? options.interval : void 0) || 0;
    connectivityState = null;
    _check = function() {
      return checkFn(options).then(function(connected) {
        if (connected === connectivityState) {
          return;
        }
        connectivityState = connected;
        fn(connected);
      })["finally"](function() {
        return setTimeout(_check, interval);
      });
    };
    return _check();
  };

  exports.checkURL = checkURL = function(options) {
    if (typeof options === 'string') {
      options = {
        url: options
      };
    }
    if (options.timeout == null) {
      options.timeout = 10000;
    }
    if (options.gzip == null) {
      options.gzip = true;
    }
    return request.getAsync(options).spread(function(response) {
      var ref;
      return (ref = response.statusCode) === 200 || ref === 304;
    })["catch"](function(e) {
      return false;
    });
  };

  exports.monitorURL = function(options, fn) {
    return monitor(checkURL, options, fn);
  };

  exports.checkHost = checkHost = function(options) {
    var ref, socket, timeout;
    timeout = (ref = options != null ? options.timeout : void 0) != null ? ref : 10000;
    socket = net.connect(options);
    return new Promise(function(resolve, reject) {
      return socket.on('connect', resolve).on('error', reject).setTimeout(timeout, reject);
    })["finally"](function() {
      return socket.destroy();
    }).then(function() {
      return true;
    })["catch"](function() {
      return false;
    });
  };

  exports.monitorHost = function(options, fn) {
    return monitor(checkHost, options, fn);
  };

}).call(this);
